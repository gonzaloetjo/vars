hive_release: apache-hive-3.1.3-1.0-bin
hive_dist_file: '{{ hive_release }}.tar.gz'
hive_user: hive
hadoop_group: hadoop
hive_root_dir: /opt/tdp
hive_install_dir: '{{ hive_root_dir }}/hive'
hive_root_conf_dir: /etc/hive
hive_s2_conf_dir: '{{ hive_root_conf_dir }}/conf.s2'
hive_client_conf_dir: '{{ hive_root_conf_dir }}/conf'
hive_ms_conf_dir: '{{ hive_root_conf_dir }}/conf.ms'
hive_pid_dir: /var/run/hive
hive_root_logger: RFA
hive_root_logger_level: INFO
hive_log_layout_pattern: '{{ tdp_log_layout_pattern }}'
hive_log_rfa_maxfilesize: 256MB
hive_log_rfa_maxbackupindex: 10
hive_log_drfa_date_pattern: '%d{yyyy-MM-dd-HH-mm}'
hive_log_drfa_maxbackupindex: 30
hadoop_home: /opt/tdp/hadoop
hadoop_conf_dir: /etc/hadoop/conf
java_home: /usr/lib/jvm/jre-1.8.0-openjdk
hdfs_user: hdfs
hive_jdbc_connector_package: postgresql-jdbc
hive_ms_db_url: jdbc:postgresql://{{ groups['postgresql'][0] | tosit.tdp.access_fqdn(hostvars) }}:5432
hive_ms_db_name: hive
hive_ms_db_user: hive
hive_ms_db_password: hive
db_type: postgres
krb_create_principals_keytabs: true
hive_keystore_location: /etc/ssl/certs/keystore.jks
hive_keystore_password: Keystore123!
hive_truststore_location: /etc/ssl/certs/truststore.jks
hive_truststore_password: Truststore123!
hive_site:
  hive.zookeeper.quorum: "{{\n  groups['zk'] |\n  map('tosit.tdp.access_fqdn', hostvars) |\n  map('regex_replace', '^(.*)$', '\\1:' + zookeeper_server_client_port | string) |\n  list |\n  join(',')\n}}"
  hive.execution.engine: tez
  hive.exec.scratchdir: /tmp/hive
  hive.metastore.sasl.enabled: 'true'
  metastore.kerberos.principal: hive/_HOST@{{ realm }}
  metastore.thrift.uri.selection: RANDOM
  metastore.thrift.uris: "{{\n  groups['hive_ms'] |\n  map('tosit.tdp.access_fqdn', hostvars) |\n  map('regex_replace', '^(.*)$', 'thrift://\\1:' + hive_metastore_listener_port | string) |\n  list |\n  join(',')\n}}"
metastore_site:
  datanucleus.schema.autoCreateAll: 'false'
  javax.jdo.option.ConnectionDriverName: org.postgresql.Driver
  javax.jdo.option.ConnectionUserName: '{{ hive_ms_db_user }}'
  metastore.hmshandler.retry.interval: 2
  metastore.hmshandler.retry.attempts: 10
  metastore.stats.autogather: 'true'
  metastore.metrics.enabled: 'true'
  metastore.kerberos.keytab.file: /etc/security/keytabs/hive.service.keytab
  metastore.schema.verification: 'true'
  metastore.schema.verification.record.version: 'true'
  metastore.warehouse.dir: /warehouse/tablespace/managed/hive
  metastore.warehouse.external.dir: /warehouse/tablespace/external/hive
  metastore.cluster.delegation.token.store.class: org.apache.hadoop.hive.thrift.DBTokenStore
  javax.jdo.option.ConnectionURL: '{{ hive_ms_db_url }}/{{ hive_ms_db_name }}'
hiveserver2_site:
  hive.server2.authentication: KERBEROS
  hive.server2.transport.mode: http
  hive.server2.thrift.port: '{{ hive_hiveserver2_thrift_port }}'
  hive.server2.thrift.http.port: '{{ hive_hiveserver2_thrift_http_port }}'
  hive.server2.thrift.http.path: cliservice
  hive.server2.thrift.sasl.qop: auth
  hive.server2.authentication.kerberos.principal: hive/_HOST@{{ realm }}
  hive.server2.authentication.kerberos.keytab: /etc/security/keytabs/hive.service.keytab
  hive.server2.authentication.spnego.principal: HTTP/_HOST@{{ realm }}
  hive.server2.authentication.spnego.keytab: /etc/security/keytabs/spnego.service.keytab
  hive.server2.support.dynamic.service.discovery: 'true'
  hive.server2.use.SSL: 'true'
  hive.server2.keystore.password: '{{ hive_keystore_password }}'
  hive.server2.keystore.path: '{{ hive_keystore_location }}'
  hive.server2.webui.port: '{{ hive_hiveserver2_webui_port }}'
  hive.server2.webui.use.ssl: 'true'
  hive.server2.webui.keystore.path: '{{ hive_keystore_location }}'
  hive.server2.webui.keystore.password: '{{ hive_keystore_password }}'
  hive.server2.metrics.enabled: 'true'
  hive.server2.thrift.http.cookie.auth.enabled: 'false'
beeline_site:
  beeline.hs2.jdbc.url.zk_cluster: jdbc:hive2://{{ hive_site["hive.zookeeper.quorum"] }}/;serviceDiscoveryMode=zooKeeper;zooKeeperNamespace=hiveserver2;principal={{ hiveserver2_site["hive.server2.authentication.kerberos.principal"] }};sslTrustStore={{ hive_truststore_location }};trustStorePassword={{ hive_truststore_password }}
  beeline.hs2.jdbc.url.default: zk_cluster
ranger_hive_release: ranger-2.0.0-1.0-hive-plugin
ranger_hive_dist_file: '{{ ranger_hive_release }}.tar.gz'
ranger_hive_install_dir: '{{ hive_root_dir }}/ranger-hive-plugin'
ranger_hive_install_properties:
  audit_hdfs: hdfs://{{ cluster_name }}
  POLICY_MGR_URL: '{% if ranger_ha_address is defined %}{{ ranger_ha_address }}{% else %}https://{{ groups[''ranger_admin''][0] | tosit.tdp.access_fqdn(hostvars) }}:{{ ranger_adm_https_port }}{% endif %}'
  REPOSITORY_NAME: hive-tdp
  XAAUDIT_SOLR_ENABLE: '{% if ''ranger_solr'' in groups and groups[''ranger_solr''] %}true{% else %}false{% endif %}'
  XAAUDIT_SOLR_URL: '{% if ''ranger_solr'' in groups and groups[''ranger_solr''] %}http://{{ groups[''ranger_solr''][0] | tosit.tdp.access_fqdn(hostvars) }}:{{ ranger_solr_http_port }}/solr/ranger_audits{% else %}NONE{% endif %}'
  zookeeper_quorum: "{{ groups['zk'] |\n  map('tosit.tdp.access_fqdn', hostvars) |\n  map('regex_replace', '^(.*)$', '\\1:' + zookeeper_server_client_port | string) |\n  list |\n  join(',')\n}}"
tez_release: tez-0.9.1-1.0
tez_dist_file: '{{ tez_release }}.tar.gz'
tez_root_dir: /opt/tdp
tez_install_dir: '{{ tez_root_dir }}/tez'
tez_site:
  tez.lib.uris: /tdp/tez/{{ tez_dist_file }}
  tez.am.resource.memory.mb: 1024
  tez.am.java.opts: -server -Xmx819m -Djava.net.preferIPv4Stack=true
  tez.am.task.am.port-range: '{{ tez_am_task_portrange }}'
  tez.am.client.am.port-range: '{{ tez_am_client_portrange }}'
  tez.task.resource.cpu.vcores: 1
  tez.task.resource.memory.mb: 1024
  hive.tez.container.size: 1024
  hive.tez.java.opts: -Xmx819m
  hive.tez.cpu.vcores: 1
hiveserver2_start_on_boot: true
hivemetastore_start_on_boot: true
hiveserver2_restart: always
hivemetastore_restart: always
hive_default_heapsize: 256m
hive_hs2_heapsize: 1024m
hive_metastore_heapsize: 1024m
jmx_exporter_root_dir: /opt/tdp/jmx-exporter
jmx_exporter_install_file: '{{ jmx_exporter_root_dir }}/jmx-exporter.jar'
jmx_exporter_conf_dir: /etc/jmx-exporter
jmx_common_opts: -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=true -Dcom.sun.management.jmxremote.ssl=true
jmx_exporter_hs2_opts: '{% if ''exporter_jmx'' in groups and groups[''exporter_jmx''] %}-javaagent:{{ jmx_exporter_install_file }}={{ exporter_hive_hs2_http_port }}:{{ jmx_exporter_conf_dir }}/hs2.yml{% else %}{% endif %}'
jmx_exporter_hms_opts: '{% if ''exporter_jmx'' in groups and groups[''exporter_jmx''] %}-javaagent:{{ jmx_exporter_install_file }}={{ exporter_hive_hms_http_port }}:{{ jmx_exporter_conf_dir }}/hms.yml{% else %}{% endif %}'
jmxremote_username: jmxuser
jmxremote_password: Tdpjmx123,
jmx_exporter:
  startDelaySeconds: 0
  ssl: true
  username: '{{ jmxremote_username }}'
  password: '{{ jmxremote_password }}'
  lowercaseOutputName: false
  lowercaseOutputLabelNames: false
